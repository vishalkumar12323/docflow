// Enhanced schema.prisma with missing properties and enums

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum JobType {
  MERGE
  SPLIT
  CONVERT
  COMPRESS
  ROTATE
  WATERMARK
}

enum JobStatus {
  QUEUED
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

model User {
  id            String     @id @default(uuid())
  email         String     @unique
  name          String?
  avatar        String? // Profile picture URL
  password      String
  emailVerified Boolean    @default(false)
  isActive      Boolean    @default(true)
  lastLoginAt   DateTime?
  auditLogs     AuditLog[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@map("users")
}

model AuditLog {
  id         String   @id @default(uuid())
  userId     String
  action     String // USER_JOINED, DOCUMENT_CREATED, etc.
  resource   String? // Resource type (document, user, etc.)
  resourceId String? // ID of the affected resource
  metadata   Json     @default("{}")
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("audit_logs")
}

model Document {
  id               String    @id @default(uuid())
  title            String
  originalFileName String // Original uploaded filename
  storageKey       String // Cloudinary public ID or file path
  storageUrl       String // Direct URL to the file
  thumbnailUrl     String? // Thumbnail image URL
  mimeType         String    @default("application/pdf")
  bytes            BigInt
  pageCount        Int
  createdBy        String // User ID
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  isDeleted        Boolean   @default(false)
  deletedAt        DateTime?

  @@map("documents")
}

model Job {
  id          String    @id @default(uuid())
  type        JobType
  status      JobStatus @default(QUEUED)
  input       Json // Job input parameters
  output      Json? // Job output/results
  progress    Int       @default(0) // 0-100
  error       String? // Error message if failed
  startedAt   DateTime?
  completedAt DateTime?
  createdBy   String // User ID
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("jobs")
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("sessions")
}
